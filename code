import pygame
import random
import math

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Asteroids")

# Colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)

# Player class
class Player:
    def __init__(self):
        self.x = WIDTH // 2
        self.y = HEIGHT // 2
        self.angle = 0
        self.speed = 0
        self.max_speed = 5
        self.bullets = []

    def rotate(self, direction):
        self.angle += direction * 5

    def accelerate(self):
        self.speed = min(self.speed + 0.1, self.max_speed)

    def move(self):
        self.x += self.speed * math.cos(math.radians(self.angle))
        self.y -= self.speed * math.sin(math.radians(self.angle))
        
        # Wrap around screen
        self.x %= WIDTH
        self.y %= HEIGHT
    
    def shoot(self):
        bullet = Bullet(self.x, self.y, self.angle)
        self.bullets.append(bullet)
    
    def draw(self):
        # Draw a triangle instead of using an image
        points = [
            (self.x + 20 * math.cos(math.radians(self.angle)), self.y - 20 * math.sin(math.radians(self.angle))),
            (self.x - 15 * math.cos(math.radians(self.angle - 140)), self.y + 15 * math.sin(math.radians(self.angle - 140))),
            (self.x - 15 * math.cos(math.radians(self.angle + 140)), self.y + 15 * math.sin(math.radians(self.angle + 140)))
        ]
        pygame.draw.polygon(screen, WHITE, points)
        
        for bullet in self.bullets:
            bullet.move()
            bullet.draw()

# Bullet class
class Bullet:
    def __init__(self, x, y, angle):
        self.x = x
        self.y = y
        self.angle = angle
        self.speed = 7

    def move(self):
        self.x += self.speed * math.cos(math.radians(self.angle))
        self.y -= self.speed * math.sin(math.radians(self.angle))
        self.x %= WIDTH
        self.y %= HEIGHT

    def draw(self):
        pygame.draw.circle(screen, RED, (int(self.x), int(self.y)), 5)

# Asteroid class
class Asteroid:
    def __init__(self):
        self.x = random.randint(0, WIDTH)
        self.y = random.randint(0, HEIGHT)
        self.angle = random.randint(0, 360)
        self.speed = random.uniform(1, 3)
        self.size = random.randint(20, 50)

    def move(self):
        self.x += self.speed * math.cos(math.radians(self.angle))
        self.y -= self.speed * math.sin(math.radians(self.angle))
        self.x %= WIDTH
        self.y %= HEIGHT

    def draw(self):
        pygame.draw.circle(screen, WHITE, (int(self.x), int(self.y)), self.size)

# Collision detection
def check_collision(bullets, asteroids):
    global score
    for bullet in bullets[:]:
        for asteroid in asteroids[:]:
            distance = math.hypot(bullet.x - asteroid.x, bullet.y - asteroid.y)
            if distance < asteroid.size:
                bullets.remove(bullet)
                asteroids.remove(asteroid)
                score += 10
                break

# Game setup
player = Player()
asteroids = [Asteroid() for _ in range(5)]
clock = pygame.time.Clock()
score = 0
font = pygame.font.SysFont(None, 36)
running = True

def draw_score():
    text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(text, (10, 10))

while running:
    screen.fill((0, 0, 0))
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                player.shoot()
    
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        player.rotate(-1)
    if keys[pygame.K_RIGHT]:
        player.rotate(1)
    if keys[pygame.K_UP]:
        player.accelerate()
    
    player.move()
    player.draw()
    
    for asteroid in asteroids:
        asteroid.move()
        asteroid.draw()
    
    check_collision(player.bullets, asteroids)
    draw_score()
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
